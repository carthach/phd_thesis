load("/Users/carthach/Google Drive/rhythm_paper/r_workspace.RData")
setwd("~/Google Drive/rhythm_paper")
load("user_details.csv")
read.csv("user_details.csv")
x = read.csv("user_details.csv")
hist(x$Complex_Rhythms)
y = read.csv("user_scores.csv")
y = read.csv("user_scores.csv")
y = read.csv("user_scores.csv")
corr(y$Fitness, y$Score)
cor(y$Fitness, y$Score)
corr(y$Distance, y$Score)
cor(y$Distance, y$Score)
cor(yFitness, y$Score)
cor(y$Fitness, y$Score)
summary(y)
describeBy( x=y, group=y$Question )
install.packages("lsr")
library("lsr", lib.loc="/usr/local/Cellar/r/3.1.2_1/R.framework/Versions/3.1/Resources/library")
library("lsr", lib.loc="/usr/local/Cellar/r/3.1.2_1/R.framework/Versions/3.1/Resources/library")
install.packages("lsr")
describeBy( x=y, group=y$Question )
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
describeBy( x=y, group=y$Question )
install.packages("psych")
library("psych", lib.loc="/usr/local/Cellar/r/3.1.2_1/R.framework/Versions/3.1/Resources/library")
describeBy( x=y, group=y$Question )
by(data=y, INDICES=y$Question, FUN=cor(y$Fitness, y$Score))
by(data=y, INDICES=y$Question, FUN=cor(y$Fitness, y$Score))
by(data=y, INDICES=y$Question, cor(y$Fitness, y$Score))
by(data=y, INDICES=y$Question, FUN=cor)
newdata  <- y[which(y$Question=="similarity")]
head(y)
tail(y)
newdata = y[1:10, ]
newdata
newdat = y[y$Question == 'interestingness']
newdata = y[y$Score == 1, ]
newdata = y[y$Score == 'interestingess', ]
newdata = y[y$Score == 'similarity', ]
newdata
newdata = y[y$Score == 'similarity', ]
newdata = y[y$Question == 'similarity', ]
newdata
cor(newdata$Fitness, newdata$Score)
cor(newdata$Distance, newdata$Score)
cor(newdata$Distance, newdata$Score)
cor(newdata$Distance, newdata$Score)
qnorm
help(qnorm)
x = rnorm(100)
x
st(x)
sd(x)
qnorm()
dnorm(0)
dnorm(0)
dnorm(0)
dnorm(0)
dnorm(0)
dnorm(1)
dnorm
dnorm(100,100,0)
dnorm(100,100,1)
pnorm(0)
pnorm(100, mean=50, sd=10)
pnorm(100, mean=50, sd=100)
dbinom(4, 0.5, 20)
dbinom(4, 20, 0.5)
dbinom(4, 20, 07)
dbinom(4, 20, 0.7)
dbinom(4, 20, 0.7)
dbinom(4, 20, 0.7)
dbinom(x=4, size=20, prob=0.7)
dbinom(x=4, size=20, prob=1/6)
dbinom(x=2, size=20, prob=1/6)
dbinom(x=2, size=20, prob=0.5)
dbinom(x=1, size=20, prob=0.5)
dbinom(x=4, size=20, prob=0.5)
dbinom(x=4, size=20, prob=0.5)
dbinom(x=4, size=20, prob=0.5)
dbinom(x=4, size=20, prob=0.5)
dbinom(x=1, size=20, prob=0.5)
dbinom(x=1, size=20, prob=0.5)
dbinom(x=1, size=1000, prob=0.1)
dbinom(x=5, size=1000, prob=0.1)
source('~/.active-rstudio-document')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
save.image("~/Google Drive/rhythm_paper/rhythm_paper.RData")
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
sim_scores
source('~/.active-rstudio-document')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
user_scores
top(user_scores)
head(user_scores)
summary(user_scores)
read.csv(file = "other_scores.csv")
read.csv(file = "new_scores.csv")
read.csv(file = "new_user_scores.csv")
install.packages(c("colorspace", "lsr", "manipulate", "mgcv"))
install.packages("XLConnect")
install.packages("XLConnect")
install.packages("XLConnect")
install.packages("rjava")
install.packages("rJava")
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
user_scores
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/.active-rstudio-document')
source('~/Google Drive/rhythm_paper/crunch.R')
cor(sim_scores_hamming$Distance, sim_scores_hamming$Score)
head(sim_scores_hamming)
sim_scores_hamming
plot(sim_scores_hamming$Distance, sim_scores_hamming$Score)
plot(sim_scores_hamming$Distance, sim_scores_hamming$Score)
write.csv(sim_scores_hamming)
help(write.csv)
write.csv(sim_scores_hamming, file="out.csv")
x = subset(user_scores, Question=="similarity")
x = subset(user_scores, Question=="similarity", Distance)
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
describeBy(sim_scores)
describeBy(sim_scores, group=sim_scores$Measure)
source('~/.active-rstudio-document')
source('~/Google Drive/rhythm_paper/crunch_horizontal.R')
source('~/Google Drive/rhythm_paper/crunch_horizontal.R')
head(user_scores)
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
summary(user_scores)
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
summary(sim_scores)
source('~/.active-rstudio-document')
barplot(user_details$Percussion)
Fibonacci <- c( 1,1,2,3,5,8,13 )
plot(Fibonacci)
table(user_scores)
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
xtabs(formula = ~ user_scores$fileName + user_scores$Score)
y = xtabs(formula = ~ user_scores$fileName + user_scores$Score)
y
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
y
longToWide(user_scores)
library("lsr", lib.loc="/usr/local/Cellar/r/3.1.2_1/R.framework/Versions/3.1/Resources/library")
library("lsr", lib.loc="/usr/local/Cellar/r/3.1.2_1/R.framework/Versions/3.1/Resources/library")
longToWide(user_scores)
longToWide(user_scores, user_scores$Score)
x = longToWide(user_scores, user_scores$Score)
y
x
head(X)
source('~/.active-rstudio-document')
head(sim_scores)
source('~/.active-rstudio-document')
x_mode = modeOf(x)
x_mode = modeOf(x$Score)
head(sim_scores)
sim_scores
aggregate(sim_scores$fileName ~ sim_scores$Score, sim_scores, sum)
aggregate(sim_scores$Score ~ sim_scores$fileName, sim_scores, sum)
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
y
formula1 <- out ~ pred
source('~/.active-rstudio-document')
user_scores
head(user_scores)
y
source('~/.active-rstudio-document')
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
y
sim_scores
y
sim_scores[(sim_scores$fileName=="Rock-Swap-Parallel-58-20"),]
sim_scores
source('~/.active-rstudio-document')
y
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
y
source('~/.active-rstudio-document')
y1
y2
source('~/.active-rstudio-document')
y2
corr(y2$sim_scores$Fitness, y2$sim_scores$Score)
cor(y2$sim_scores$Fitness, y2$sim_scores$Score)
cor(y2$sim_scores$Fitness, y2$sim_scores$Fitness)
cor
help(cor)
cor(x=y2$sim_scores$Fitness,y=y2$sim_scores$Score)
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
install.packages("data.table")
source('~/.active-rstudio-document')
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
source('~/.active-rstudio-document')
sim_scores_table
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
modeByFilename
source('~/.active-rstudio-document')
modeByFilename
modeByFilename
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
y
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
source('~/.active-rstudio-document')
help(modOf)
help(modeOf)
read.csv("user_scores_mode.csv")
a = read.csv("user_scores_mode.csv")
cor(a$Distance, a$Mode)
a_sim = subset(a, a$Question=="similarity")
cor(a_sim$Distance, a_sim$Mode)
source('~/Google Drive/rhythm_paper/crunch_vertical.R')
sim_scores
box(sim_scores$Score)
boxplot(sim_scores$Score)
boxplot(sim_scores$fileName ~ sim_scores$Score)
boxplot(formula=sim_scores$fileName ~ sim_scores$Score, sim_scores)
boxplot(formula=sim_scores$Score ~ sim_scores$fileName, sim_scores)
boxplot(formula=sim_scores$Score ~ sim_scores$fileName, sim_scores)
boxplot(formula=sim_scores$Score ~ sim_scores$fileName, data=sim_scores)
boxplot(formula=sim_scores$Score ~ sim_scores$fileName, data=sim_scores)
sim_scores
sortFrame(sim_scores$Distance)
sortFrame(sim_scores, sim_scores$Distance)
sortFrame(sim_scores)
sortFrame(sim_scores, sim_scores$Distance)
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
sim_scores_mode
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
inter_scores
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
View(inter_scores_only)
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
View(inter_scores_only_t)
View(inter_scores_only_t)
library("car", lib.loc="/usr/local/Cellar/r/3.1.2_1/R.framework/Versions/3.1/Resources/library")
Boxplot(inter_scores_only_t)
Boxplot(inter_scores_only_t$Latin-Swap-Linear-05-21.wav)
View(inter_scores_only_t)
View(inter_scores_only_t)
View(inter_scores_only_t)
save(inter_scores_only, "inter_scores_transposed.Rdata")
help(save)
save(inter_scores_only, file="inter_scores_transposed.Rdata")
load("/Users/carthach/Google Drive/rhythm_paper/inter_scores_transposed.Rdata")
write.csv(inter_scores_only, file="inter_scores_transposed.csv")
d <- data.frame(x1=rnorm(10),
x2=rnorm(10),
x3=rnorm(10))
d
cor(d)
View(inter_swap_scores)
View(inter_swap_scores)
View(sim_parallel_scores)
View(sim_parallel_scores)
View(sim_hamming_scores)
View(sim_hamming_scores)
d = data.frame(sim_scores$fileName, sim_scores$Mode )
d
cor(d)
d = data.frame(sim_scores$Distance, sim_scores$Mode )
cor(d)
d = data.frame(sim_scores$Fitness, sim_scores$Distance, sim_scores$Mode )
cor(d)
d = data.frame(sim_hamming_scores$Fitness, sim_hamming_scores$Distance, sim_hamming_scores$Mode )
cor(d)
summary(sim_hamming_scores)
cor(sim_scores$Distance, sim_scores$Mode)
summary(user_scores)
summary(sim_scores
summary(sim_scores)
summary(sim_hamming_scores)
summary(sim_swap_scores)
source('~/.active-rstudio-document')
sim_cor_matrix
source('~/.active-rstudio-document')
sim_hamming_scores_matrix
source('~/Google Drive/rhythm_paper/crunch.R')
sim_hamming_matrix
source('~/Google Drive/rhythm_paper/crunch.R')
sim_swap_scores
sim_swap_matrix
source('~/Google Drive/rhythm_paper/crunch.R')
cor(sim_linear_matrix)
cor(sim_parallel_matrix)
sim_linear_scores
sim_linear_scores
cor(sim_parallel_matrix)
cor(sim_linear_matrix)
source('~/.active-rstudio-document')
sim.Hamming.Linear
source('~/Google Drive/rhythm_paper/crunch.R')
source('~/Google Drive/rhythm_paper/crunch.R')
sim.Hamming.Linear
sim.Hamming.Linear
sim.Hamming.Linear = subset(sim_scores)
sim.Hamming.Linear
sim.Hamming.Linear = subset(sim_scores, Genre=="latin")
sim.Hamming.Linear = subset(sim_scores, Measure=="Swap")
sim.Hamming.Linear = subset(sim_scores, Measure=="Swap")
sim.Hamming.Linear
sim.Hamming.Linear = subset(sim_scores, Measure="Swap")
View(sim.Hamming.Linear)
View(sim.Hamming.Linear)
sim.Hamming.Linear = subset(sim_scores, Measure=="Swap")
View(sim.Hamming.Linear)
View(sim.Hamming.Linear)
sim.Hamming.Linear = subset(sim_scores, Measure=="Swap", patternType=="Linear")
sim.Hamming.Linear = subset(sim_scores, Measure=="Swap"& patternType=="Linear")
View(sim.Hamming.Linear)
View(sim.Hamming.Linear)
dbinom(x=4, size=20, prob=1/6)
dbinom(x=4, size=20, prob=5/6)
dbinom(x=4, size=20, prob=2/6)
dbinom(x=4, size=20, prob=1/10)
dbinom(x=4, size=20, prob=1/20)
dbinom(x=4, size=20, prob=1/6)
dbinom(x=1, size=20, prob=1/6)
dbinom(x=5, size=20, prob=1/6)
dbinom(x=10, size=20, prob=1/6)
dbinom(x=10, size=20, prob=6/6)
dbinom(x=1, size=20, prob=6/6)
dbinom(x=4, size=100, prob=1/6)
dbinom(x=4, size=100, prob=1/6)
dbinom(x=4, size=100, prob=1/2)
dbinom(x=1, size=20, prob=1/2)
dbinom(x=1, size=1, prob=1/2)
dbinom(x=1, size=2, prob=1/2)
dbinom(x=1, size=3, prob=1/2)
dbinom(x=1, size=4, prob=1/2)
dbinom(x=4, size=4, prob=1/2)
dbinom(x=2, size=4, prob=1/2)
dbinom(x=1, size=4, prob=1/2)
dbinom(x=3, size=4, prob=1/2)
dbinom(x=2, size=4, prob=1/2)
dbinom(x=4, size=4, prob=1/2)
dbinom(x=4, size=20, prob=1/2)
dbinom(x=5, size=20, prob=1/2)
dbinom(x=6, size=20, prob=1/2)
dbinom(x=7, size=20, prob=1/2)
dbinom(x=10, size=20, prob=1/2)
dbinom(x=1, size=20, prob=1/2)
dbinom(x=20, size=20, prob=1/2)
dbinom(x=1, size=1, prob=1/2)
dbinom(x=2, size=1, prob=1/2)
dbinom(x=1, size=2, prob=1/2)
dbinom(x=1, size=3, prob=1/2)
dbinom(x=4, size=20, prob=1/6)
dbinom(x=1, size=20, prob=1/6)
dbinom(x=2, size=20, prob=1/6)
dbinom(x=3, size=20, prob=1/6)
dbinom(x=4, size=20, prob=1/6)
dbinom(x=5, size=20, prob=1/6)
dbinom(x=6, size=20, prob=1/6)
dbinom(x=4, size=20, prob=1/6)
dbinom(x=3, size=20, prob=1/6)
dbinom(x=3, size=2, prob=1/2)
dbinom(x=2, size=2, prob=1/2)
dbinom(x=2, size=3, prob=1/2)
dbinom(x=3, size=2, prob=1/2)
dbinom(x=3, size=3, prob=1/2)
qbinom(x=0.8, size = 3, prob=1/2)
qbinom(p=0.8, size = 3, prob=1/2)
qbinom(p=0.1, size = 3, prob=1/2)
qbinom(p=0.25, size = 3, prob=1/2)
qbinom(p=0.25, size = 1, prob=1/2)
qbinom(p=0.25, size = 1, prob=1/2)
qbinom(p=0.50, size = 1, prob=1/2)
qbinom(q=0.50, size = 1, prob=1/2)
qbinom(q=1, size = 1, prob=1/2)
qbinom(q=1, size = 2, prob=1/2)
pbinom(q=1, size = 2, prob=1/2)
pbinom(q=1, size = 3, prob=1/2)
pbinom(q=2, size = 3, prob=1/2)
pbinom(q=3, size = 3, prob=1/2)
X = dbinom(x = 50, size=100, p=0.5)
dbinom(x = 50, size=100, p=0.5)
dbinom(x = 49, size=100, p=0.5)
rbinom(x = 49, size=100, p=0.5)
rbinom(50, 100, 0.5)
x = rbinom(50, 100, 0.5)
modeOf(x)
source('~/.active-rstudio-document')
modeOf(x)
modeOf(x)
x = rbinom(50, 100, 0.5)
modeOf(x)
x = rbinom(50, 100, 0.5)
modeOf(x)
modeOf(x)
x = rbinom(50, 100, 0.5)
modeOf(x)
x = rbinom(50, 100, 0.5)
modeOf(x)
binom.test(x=62, n100, p=0.5)
binom.test(x=62, n=100, p=0.5)
binom.test(x=2, n=2, p=0.5)
binom.test(x=2, n=2, p=0.5)
binom.test(x=2, n=2, p=0.5)
binom.test(x=1, n=2, p=0.5)
binom.test(x=1, n=2, p=0.5)
binom.test(x=1, n=1, p=0.5)
binom.test(x=1, n=10, p=0.5)
dbinom(x=1, n=10, p=0.5)
dbinom(x=1, size=10, p=0.5)
dbinom(x=1, size=10, p=0.5)
dbinom(x=2, n=2, p=0.5)
dbinom(x=2, size=2, p=0.5)
dbinom(x=1, size=2, p=0.5)
dbinom(x=1, size=1, p=0.5)
dbinom(x=1, size=2, p=0.5)
dbinom(x=2, size=2, p=0.5)
dbinom(x=1, size=2, p=0.5)
setwd("~/Dev/R/book/data")
load("randomness.Rdata")
load("randomness.Rdata")
View(cards)
View(cards)
observed = table(cards$choice_1)
