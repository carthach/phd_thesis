{
    "collab_server" : "",
    "contents" : "library(\"lsr\")\nlibrary(\"psych\")\nlibrary(\"likert\")\nlibrary(\"reshape\")\n\n#Read in data\nuser_scores = read.csv(\"user_scores_mode.csv\")\n\n#This hack n slash gets rid of high variability rows\ncount = 0\nindices = vector()\n\nf <- function(row) {\n  responses = as.numeric(row[c(8:29)])\n  mode = as.numeric(row[30])\n    \n  responses_minus_mode = responses - mode\n  responses_abs = abs(responses_minus_mode)\n  responses_count = responses_abs >= 2\n  \n#   print(mode)\n#   print(responses)\n#   print(responses_minus_mode)\n#   print(responses_abs)\n#   print(responses_count)\n#   print(\"=================\")\n  \n  responses_tf = table(responses_count)\n  \n  count <<- count + 1\n  \n  if(responses_tf[1] < 10.5) {\n    indices <<- c(indices, count)\n  }\n}\n\napply(user_scores, 1, f)\nuser_scores = user_scores[-indices, ]\n\n###############\n#Similarity Stuff\n\n#Get Similarity scores only\nsim_scores =user_scores[user_scores$Question == 'similarity', ]\nsim_cor_matrix = cor(data.frame(sim_scores$Distance, sim_scores$Fitness, sim_scores$Mode), method = \"spearman\")\n\n#Specific variables\nsim_hamming_scores = sim_scores[sim_scores$Measure =='Hamming',]\nsim_swap_scores = sim_scores[sim_scores$Measure =='Swap',]\nsim_linear_scores = sim_scores[sim_scores$patternType =='Linear',]\nsim_parallel_scores = sim_scores[sim_scores$patternType =='Parallel',]\n\n#Cor matrices\nsim_hamming_matrix = cor(data.frame(sim_hamming_scores$Distance, sim_hamming_scores$Fitness, sim_hamming_scores$Mode), method = \"spearman\")\nsim_swap_matrix = cor(data.frame(sim_swap_scores$Distance, sim_swap_scores$Fitness, sim_swap_scores$Mode), method = \"spearman\")\nsim_linear_matrix = cor(data.frame(sim_linear_scores$Distance, sim_linear_scores$Fitness, sim_linear_scores$Mode), method = \"spearman\")\nsim_parallel_matrix = cor(data.frame(sim_parallel_scores$Distance, sim_parallel_scores$Fitness, sim_parallel_scores$Mode), method = \"spearman\")\n\n#Cor test distance (includes p-values)\nsim_hamming_test_distance = cor.test(sim_hamming_scores$Distance, sim_hamming_scores$Mode, method=\"spearman\", exact = FALSE)\nsim_swap_test_distance = cor.test(sim_swap_scores$Distance, sim_swap_scores$Mode, method=\"spearman\", exact = FALSE)\nsim_linear_test_distance = cor.test(sim_linear_scores$Distance, sim_linear_scores$Mode, method=\"spearman\", exact = FALSE)\nsim_parallel_test_distance = cor.test(sim_parallel_scores$Distance, sim_parallel_scores$Mode, method=\"spearman\", exact = FALSE)\n\n#Cor test fitness (includes p-values)\nsim_hamming_test_fitness = cor.test(sim_hamming_scores$Fitness, sim_hamming_scores$Mode, method=\"spearman\", exact = FALSE)\nsim_swap_test_fitness = cor.test(sim_swap_scores$Fitness, sim_swap_scores$Mode, method=\"spearman\", exact = FALSE)\nsim_linear_test_fitness = cor.test(sim_linear_scores$Fitness, sim_linear_scores$Mode, method=\"spearman\", exact = FALSE)\nsim_parallel_test_fitness = cor.test(sim_parallel_scores$Fitness, sim_parallel_scores$Mode, method=\"spearman\", exact = FALSE)\n\n###############\n#Interestingess Stuff\n\n#Get Interest scores only\ninter_scores =user_scores[user_scores$Question == 'interestingness', ]\ninter_cor_matrix = cor(data.frame(inter_scores$Distance, inter_scores$Fitness, inter_scores$Mode), method = \"spearman\")\n\ninter_test_distance = cor.test(inter_scores$Distance, inter_scores$Mode, method=\"spearman\", exact=FALSE)\ninter_test_fitness = cor.test(inter_scores$Fitness, inter_scores$Mode, method=\"spearman\", exact=FALSE)\n\n#Specific variables\ninter_hamming_scores = inter_scores[inter_scores$Measure =='Hamming',]\ninter_swap_scores = inter_scores[inter_scores$Measure =='Swap',]\ninter_linear_scores = inter_scores[inter_scores$patternType =='Linear',]\ninter_parallel_scores = inter_scores[inter_scores$patternType =='Parallel',]\n\n#Cor matrices\ninter_hamming_matrix = cor(data.frame(inter_hamming_scores$Distance, inter_hamming_scores$Fitness, inter_hamming_scores$Mode), method = \"spearman\")\ninter_swap_matrix = cor(data.frame(inter_swap_scores$Distance, inter_swap_scores$Fitness, inter_swap_scores$Mode), method = \"spearman\")\ninter_linear_matrix = cor(data.frame(inter_linear_scores$Distance, inter_linear_scores$Fitness, inter_linear_scores$Mode), method = \"spearman\")\ninter_parallel_matrix = cor(data.frame(inter_parallel_scores$Distance, inter_parallel_scores$Fitness, inter_parallel_scores$Mode), method = \"spearman\")\n\n#Cor test distance (includes p-values)\ninter_hamming_test_distance = cor.test(inter_hamming_scores$Distance, inter_hamming_scores$Mode, method=\"spearman\", exact = FALSE)\ninter_swap_test_distance = cor.test(inter_swap_scores$Distance, inter_swap_scores$Mode, method=\"spearman\", exact = FALSE)\ninter_linear_test_distance = cor.test(inter_linear_scores$Distance, inter_linear_scores$Mode, method=\"spearman\", exact = FALSE)\ninter_parallel_test_distance = cor.test(inter_parallel_scores$Distance, inter_parallel_scores$Mode, method=\"spearman\", exact = FALSE)\n\n#Cor test fitness (includes p-values)\ninter_hamming_test_fitness = cor.test(inter_hamming_scores$Fitness, inter_hamming_scores$Mode, method=\"spearman\", exact = FALSE)\ninter_swap_test_fitness = cor.test(inter_swap_scores$Fitness, inter_swap_scores$Mode, method=\"spearman\", exact = FALSE)\ninter_linear_test_fitness = cor.test(inter_linear_scores$Fitness, inter_linear_scores$Mode, method=\"spearman\", exact = FALSE)\ninter_parallel_test_fitness = cor.test(inter_parallel_scores$Fitness, inter_parallel_scores$Mode, method=\"spearman\", exact = FALSE)\n\n##############\n#Plot just interesting scores\nkeeps = c('Mode')\ninter_likert = inter_scores[keeps]\nnames(inter_likert)[1] <- \"Interestingness\"\ninter_likert$Interestingness = as.factor(inter_likert$Interestingness)\nlikert_Labels = c(\"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\")\nlevels(inter_likert$Interestingness) <- c(\"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\")\nx = likert(inter_likert)\n\n##############\n#Plot just interesting scores\nkeeps = c('Mode', 'Distance')\ninter_likert = inter_scores[keeps]\nsim_likert = sim_scores[keeps]\n# dotplot(inter_likert)\n\n##############\n\n#Dots\ninter_par_scores = inter_scores[7:29]\ninter_par_scores = melt(inter_par_scores, \"Distance\")\ninter_par_scores = sortFrame(inter_par_scores, Distance)\ninter_par_scores = subset(inter_par_scores, select = -c(variable) )\n# inter_par_scores = subset(inter_par_scores, value>=4)\ninter_freq = table(inter_par_scores$Distance)\n\n\n\nsim_par_scores = sim_scores[7:29]\nsim_par_scores = melt(sim_par_scores, \"Distance\")\nsim_par_scores = sortFrame(sim_par_scores, Distance)\nsim_par_scores = subset(sim_par_scores, select = -c(variable) )\n# sim_par_scores = subset(sim_par_scores, value>=4)\nsim_freq = table(sim_par_scores$Distance)\n\nmydata <- merge(inter_par_scores, sim_par_scores) \n\n# \n# plot(inter_freq,type=\"l\",col=\"red\")\n# lines(sim_freq,col=\"green\")\n#Freq\n\n# -----------------\n# Functions\n# -----------------\n\npanel.cor.ordered.categorical <- function(x, y, digits=2, prefix=\"\", cex.cor)\n{\n  \n  usr <- par(\"usr\"); on.exit(par(usr))\n  par(usr = c(0, 1, 0, 1))\n  \n  r <- abs(cor(x, y, method = \"spearman\")) # notive we use spearman, non parametric correlation here\n  r.no.abs <- cor(x, y, method = \"spearman\")\n  \n  \n  txt <- format(c(r.no.abs , 0.123456789), digits=digits)[1]\n  txt <- paste(prefix, txt, sep=\"\")\n  if(missing(cex.cor)) cex <- 0.8/strwidth(txt)\n  \n  test <- cor.test(x,y, method = \"spearman\")\n  # borrowed from printCoefmat\n  Signif <- symnum(test$p.value, corr = FALSE, na = FALSE,\n                   cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),\n                   symbols = c(\"***\", \"**\", \"*\", \".\", \" \"))\n  \n  text(0.5, 0.5, txt, cex = cex * r)\n  text(.8, .8, Signif, cex=cex, col=2)\n}\n\n\n\n\npanel.smooth.ordered.categorical <- function (x, y, col = par(\"col\"), bg = NA, pch = par(\"pch\"),\n                                              cex = 1, col.smooth = \"red\", span = 2/3, iter = 3,\n                                              point.size.rescale = 1.5, ...)\n{\n  #require(colorspace)\n  require(reshape)\n  z <- merge(data.frame(x,y), melt(table(x ,y)),sort =F)$value\n  #the.col <- heat_hcl(length(x))[z]\n  z <- point.size.rescale*z/ (length(x)) # notice how we rescale the dots accourding to the maximum z could have gotten\n  \n  symbols( x, y,  circles = z,#rep(0.1, length(x)), #sample(1:2, length(x), replace = T) ,\n           inches=F, bg= \"grey\",#the.col ,\n           fg = bg, add = T)\n  \n  # points(x, y, pch = pch, col = col, bg = bg, cex = cex)\n  ok <- is.finite(x) & is.finite(y)\n  if (any(ok))\n    lines(stats::lowess(x[ok], y[ok], f = span, iter = iter),\n          col = col.smooth, ...)\n}\n\n\npanel.hist <- function(x, ...)\n{\n  usr <- par(\"usr\"); on.exit(par(usr))\n  par(usr = c(usr[1:2], 0, 1.5) )\n  h <- hist(x, plot = FALSE, br = 20)\n  breaks <- h$breaks; nB <- length(breaks)\n  y <- h$counts; y <- y/max(y)\n  rect(breaks[-nB], 0, breaks[-1], y, col=\"orange\", ...)\n}\n\n\npairs.ordered.categorical <- function(xx,...)\n{\n  pairs(xx ,\n        diag.panel = panel.hist ,\n        lower.panel=panel.smooth.ordered.categorical,\n        upper.panel=panel.cor.ordered.categorical,\n        cex.labels = 1.5, ...)\n}\n\n\n\n\n# -----------------\n# Example\n# -----------------\n\n# set.seed(666)\n# a1 <- sample(1:5, 100, replace = T)\n# a2 <- sample(1:5, 100, replace = T)\n# a3 <- round(jitter(a2, 7) )\n# a3[a3 < 1 | a3 > 5] <- 3\n# a4 <- 6-round(jitter(a1, 7) )\n# a4[a4 < 1 | a4 > 5] <- 3\n\naa <- data.frame(inter_par_scores$Distance, inter_par_scores$Distance)\n\nrequire(reshape)\n\n# plotting :)\npairs.ordered.categorical(aa)\n\n",
    "created" : 1503955024040.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3759520586",
    "id" : "15CCA49E",
    "lastKnownWriteTime" : 1434033336,
    "last_content_update" : 1434033336,
    "path" : "~/Google Drive/Phd_Work/Papers/gendrum-SMC/stats_work/crunch.R",
    "project_path" : "crunch.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}